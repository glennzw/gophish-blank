# This is a basic workflow that is manually triggered

name: Manual workflow Build Win

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:

jobs:
    build:
        name: Build Binary
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [windows-latest]
                arch: [amd64]
                include:
                    - os: windows-latest
                      goos: windows
                      bin: 'gophish.exe'
                      releaseos: windows
        steps:
            - name: Set up Go
              uses: actions/setup-go@v2
              with:
                #go-version: 1.14
                go-version: 1.18
            - run: echo "Hello world"
            #- run: export CGO_CFLAGS="-g -O2 -Wno-return-local-addr"
            ######- run: echo "CGO_CFLAGS='-g -O2 -Wno-return-local-addr'" >> $GITHUB_ENV ########## MEW
            - run: echo "RELEASE=gophish-tag_name_placeholder-${{ matrix.releaseos }}-64bit" >> $GITHUB_ENV
            - uses: actions/checkout@v2
            - name: Build ${{ matrix.goos }}/${{ matrix.arch }}
              run: go build -o ${{ matrix.bin }}
              env:
                GOOS: ${{ matrix.goos }}
                GOARCH: ${{ matrix.arch }}
                CGO_ENABLED: 1
            #####    CGO_CFLAGS: "-g -O2 -Wno-return-local-addr"
            - name: Upload to artifacts
              uses: actions/upload-artifact@v3
              with:
                name: envRELEASE #### MEW ${{ env.RELEASE }}
                path: ${{ matrix.bin }}
                
            



#    package:
#        name: Package Assets
#        runs-on: ubuntu-latest
#        needs: build
#        steps:
#            - uses: actions/checkout@v2
#            - uses: actions/download-artifact@v2
#              with:
#                path: bin
#            - name: Package Releases
#              run: |
#                mkdir releases;
#                for RELEASE_DIR in bin/*
#                do
#                  echo "Creating release $RELEASE_DIR"
#                  for BINARY in $RELEASE_DIR/*
#                  do
#                    cp $BINARY .;
#                    zip -r releases/$(basename $RELEASE_DIR).zip \
#                      $(basename ${BINARY}) \
#                      static/js/dist \
#                      static/js/src/vendor/ckeditor \
#                      static/css/dist \
#                      static/images \
#                      static/font \
#                      static/db \
#                      db \
#                      templates \
#                      README.md \
#                      VERSION \
#                      LICENSE \
#                      config.json;
#                    rm $BINARY;
#                  done
#                done
#            - name: Upload to artifacts
#              uses: actions/upload-artifact@v3
#              with:
#                name: releases
#                path: releases/*.zip
