name: Build Gophish Release Windows
on:
    release:
        types: [created]

jobs:
    build:
        name: Build Binary
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [windows-latest, ubuntu-latest, macos-latest]
                #arch: ['386', amd64]
                arch: [amd64]
                # We sometimes use different verbiage for things (e.g. "darwin"
                # for the GOOS build flag and "osx" in the actual release ZIP).
                # We need to specify those here.
                include:
                    - os: windows-latest
                      goos: windows
                      bin: 'gophish.exe'
                      releaseos: windows
                    #- os: ubuntu-latest
                    #  goos: linux
                    #  bin: 'gophish'
                    #  releaseos: linux
                    #- os: macos-latest
                    #  goos: darwin
                    #  bin: 'gophish'
                    #  releaseos: osx
                # Don't build windows-32bit due to missing MinGW dependencies
                # Don't build osx-32bit due to eventual drop in Go support
                #exclude:
                #    - os: windows-latest
                #      arch: '386'
                #    - os: macos-latest
                #      arch: '386'
        steps:
            - name: Set up Go
              uses: actions/setup-go@v2
              with:
                #go-version: 1.14
                go-version: 1.18
            - if: matrix.os == 'ubuntu-latest'
              run: sudo apt-get update && sudo apt-get install -y gcc-multilib
            - if: matrix.arch == '386'
              run: echo "RELEASE=gophish-${{ github.event.release.tag_name }}-${{ matrix.releaseos }}-32bit" >> $GITHUB_ENV
            - if: matrix.arch == 'amd64'
              run: echo "RELEASE=gophish-${{ github.event.release.tag_name }}-${{ matrix.releaseos }}-64bit" >> $GITHUB_ENV
            - uses: actions/checkout@v2
            - name: Build ${{ matrix.goos }}/${{ matrix.arch }}
              run: go build -o ${{ matrix.bin }}
              env:
                GOOS: ${{ matrix.goos }}
                GOARCH: ${{ matrix.arch }}
                CGO_ENABLED: 1
            - name: Upload to artifacts
              uses: actions/upload-artifact@v2
              with:
                name: ${{ env.RELEASE }}
                path: ${{ matrix.bin }}
            - run: echo "Breakpoint 1"

#    package:
#        name: Package Assets
#        runs-on: ubuntu-latest
#        needs: build
#        steps:
#            - uses: actions/checkout@v2
#            - uses: actions/download-artifact@v2
#              with:
#                path: bin
#            - name: Package Releases
#              run: |
#                mkdir releases;
#                for RELEASE_DIR in bin/*
#                do
#                  echo "Creating release $RELEASE_DIR"
#                  for BINARY in $RELEASE_DIR/*
#                  do
#                    cp $BINARY .;
#                    zip -r releases/$(basename $RELEASE_DIR).zip \
#                      $(basename ${BINARY}) \
#                      static/js/dist \
#                      static/js/src/vendor/ckeditor \
#                      static/css/dist \
#                      static/images \
#                      static/font \
#                      static/db \
#                      db \
#                      templates \
#                      README.md \
#                      VERSION \
#                      LICENSE \
#                      config.json;
#                    rm $BINARY;
#                  done
#                done
#            - name: Upload to artifacts
#              uses: actions/upload-artifact@v3
#              with:
#                name: releases
#                path: releases/*.zip
    
